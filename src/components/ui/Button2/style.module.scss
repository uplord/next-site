@use 'sass:color';
@use '../../../styles/variables' as *;
@use '../../../styles/mixins' as *;
@use '../../../styles/typography' as *;

.group {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.button {
  position: relative;
  font-size: 1rem;
  line-height: 1.5;
  border: 1px solid transparent;
  border-radius: 0.5em;
  text-decoration: none;
  transition:
    background-color 0.3s ease,
    color 0.3s ease;

  &:focus {
    outline: 2px solid $color-dark;
    outline-offset: 2px;

    @include dark-mode {
      outline-color: $color-light;
      outline-offset: 3px;
    }
  }

  &:disabled {
    background-color: #cccccc;
    color: #666666;

    @include dark-mode {
      background-color: #cccccc;
      color: #666666;
    }

    &:hover {
      background-color: #cccccc;
      color: #666666;

      @include dark-mode {
        background-color: #cccccc;
        color: #666666;
      }
    }
  }
}

.sm {
  @include text-sm;

  padding: 0.375rem 0.625rem;

  &.icon {
    padding: 0.5rem;
  }
}

.md {
  @include text-md;

  padding: 0.5rem 1rem;

  &.icon {
    padding: 0.625rem;
  }
}

.lg {
  @include text-lg;

  padding: 0.625rem 1.25rem;

  &.icon {
    padding: 0.75rem;
  }
}

.default {
  background-color: $color-default;
  color: $color-light;

  @include dark-mode {
    background-color: $color-default-dark;
    color: $color-dark;
  }

  &:hover {
    background-color: color.adjust($color-default, $lightness: 20%);

    @include dark-mode {
      background-color: color.adjust($color-default-dark, $lightness: -20%);
    }
  }
}

.primary {
  background-color: $color-primary;
  color: $color-light;

  &:hover {
    background-color: color.adjust($color-primary, $lightness: -10%);
  }
}

.success {
  background-color: $color-success;
  color: $color-light;

  &:hover {
    background-color: color.adjust($color-success, $lightness: -10%);
  }
}

.outline {
  border-color: $color-border;
}

.content {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.is-loading {
  .content {
    opacity: 0;
  }
}

.loading {
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  animation: rotate-loading 2s linear infinite;
}

@keyframes rotate-loading {
  0% {
    transform: translate(-50%, -50%) rotate(0deg);
  }
  100% {
    transform: translate(-50%, -50%) rotate(360deg);
  }
}
